import math
import heapq
import time
from collections import defaultdict
from vexcode_vr import *

# Initialize Robot Components
brain = Brain()
drivetrain = Drivetrain("drivetrain", 0)
pen = Pen("pen", 8)
pen.set_pen_width(THIN)
left_bumper = Bumper("leftBumper", 2)
right_bumper = Bumper("rightBumper", 3)
front_eye = EyeSensor("frontEye", 4)
down_eye = EyeSensor("downEye", 5)
front_distance = Distance("frontdistance", 6)
magnet = Electromagnet("magnet", 7)
location = Location("location", 9)

# Constants
TILE_DISTANCE = 250  # Distance between tiles in mm
COLUMNS, ROWS = 8, 8  # Grid size
START_COORDS = (4, 7)  # Starting position of the robot
DEST_COORDS = (3, 0)  # Destination coordinates
DIRECTIONS = [(0, -1), (1, 0), (0, 1), (-1, 0)]  # Cardinal directions (Up, Right, Down, Left)
exit_found = False  # Flag to determine if exit is found

class Node:
    """Represents a node in the search grid."""
    def __init__(self):
        self.prev_x = 0
        self.prev_y = 0
        self.total_cost = float('inf')
        self.start_cost = float('inf')
        self.dest_cost = 0


def map_maze():
    """Explores the maze and builds a graph representation."""
    global exit_found
    graph = defaultdict(list)  # Dictionary to store graph connections
    visited = {(START_COORDS[0] * 10) + START_COORDS[1]}  # Set to keep track of visited nodes
    exit_found = False  # Reset exit flag
    search_nodes(graph, visited, *START_COORDS)  # Start recursive search
    return graph


def search_nodes(graph, visited, x, y):
    """Recursively explores and maps all reachable tiles in the maze."""
    global exit_found
    if not exit_found:
        exit_found = down_eye.detect(RED)  # Check if exit is detected
    
    for i, (dx, dy) in enumerate(DIRECTIONS):
        new_x, new_y = x + dx, y + dy
        old_key, new_key = (x * 10) + y, (new_x * 10) + new_y
        
        # Check if new position is within bounds, not visited, and exit not found
        if not (0 <= new_x < COLUMNS and 0 <= new_y < ROWS) or new_key in visited or exit_found:
            continue
        
        drivetrain.turn_to_heading(i * 90, DEGREES, wait=True)  # Turn robot to face new direction
        
        # Check if there is an open path
        if front_distance.get_distance(MM) >= 100:
            graph[old_key].append(new_key)
            visited.add(new_key)
            drivetrain.drive_for(FORWARD, TILE_DISTANCE, MM)  # Move forward
            search_nodes(graph, visited, new_x, new_y)  # Recursively search new position
            drivetrain.turn_to_heading(i * 90, DEGREES, wait=True)  # Reset direction
            drivetrain.drive_for(REVERSE, TILE_DISTANCE, MM)  # Move back to previous position


def a_star(graph):
    """Finds the shortest path from start to destination using A* search algorithm."""
    nodes = [[Node() for _ in range(COLUMNS)] for _ in range(ROWS)]  # Create a 2D grid of nodes
    x, y = START_COORDS
    nodes[y][x].prev_x, nodes[y][x].prev_y = x, y  # Mark start node
    nodes[y][x].total_cost = nodes[y][x].start_cost = 0
    
    to_search = [(0.0, x, y)]  # Priority queue for A*
    visited = set()
    
    while to_search:
        _, x, y = heapq.heappop(to_search)  # Get node with lowest cost
        key = (x * 10) + y
        visited.add(key)
        
        if key not in graph:
            continue
        
        for next_key in graph[key]:
            next_x, next_y = divmod(next_key, 10)
            if next_key in visited:
                continue
            
            if (next_x, next_y) == DEST_COORDS:  # If destination is reached, reconstruct path
                nodes[next_y][next_x].prev_x, nodes[next_y][next_x].prev_y = x, y
                return create_path(nodes)
            
            start_cost = nodes[y][x].start_cost + 1
            dest_cost = heuristic(next_x, next_y)
            total_cost = start_cost + dest_cost
            
            if nodes[next_y][next_x].total_cost > total_cost:
                heapq.heappush(to_search, (total_cost, next_x, next_y))
                nodes[next_y][next_x].prev_x, nodes[next_y][next_x].prev_y = x, y
                nodes[next_y][next_x].total_cost = total_cost
                nodes[next_y][next_x].start_cost = start_cost
                nodes[next_y][next_x].dest_cost = dest_cost


def heuristic(x, y):
    """Computes the Euclidean distance heuristic."""
    return math.sqrt((x - DEST_COORDS[0]) ** 2 + (y - DEST_COORDS[1]) ** 2)


def create_path(nodes):
    """Reconstructs the shortest path from destination back to the start."""
    path = []
    x, y = DEST_COORDS
    while (x, y) != START_COORDS:
        path.append((x, y))
        x, y = nodes[y][x].prev_x, nodes[y][x].prev_y
    return path[::-1]  # Reverse to get the correct order


def follow_path(path):
    """Moves the robot along the computed path."""
    prev_x, prev_y = START_COORDS
    for x, y in path:
        heading = DIRECTIONS.index((x - prev_x, y - prev_y)) * 90  # Determine direction to move
        drivetrain.turn_to_heading(heading, DEGREES, wait=True)  # Turn to correct heading
        drivetrain.drive_for(FORWARD, TILE_DISTANCE, MM, wait=True)  # Move forward
        prev_x, prev_y = x, y


def main():
    """Main function to control robot behavior."""
    drivetrain.set_drive_velocity(100, PERCENT)
    drivetrain.set_turn_velocity(100, PERCENT)
    
    start_time = time.time()
    graph = map_maze()  # Explore and map the maze
    brain.print(f'Exploration completed in: {time.time() - start_time:.2f}s\n')
    
    start_time = time.time()
    path = a_star(graph)  # Compute shortest path
    brain.print(f'Shortest path found in: {time.time() - start_time:.2f}s\n')
    
    pen.set_pen_color(GREEN)
    pen.move(DOWN)
    
    start_time = time.time()
    follow_path(path)  # Follow the computed path
    total_time = time.time() - start_time
    
    brain.print(f'Followed path in: {total_time:.2f}s\n')
    brain.print(f'Total execution time: {total_time:.2f}s\n')

# Run VR thread to execute the main function
vr_thread(main)
